/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_EmployeeList_tsx",{

/***/ "(app-pages-browser)/./src/components/EmployeeList.tsx":
/*!*****************************************!*\
  !*** ./src/components/EmployeeList.tsx ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// import { useLazyQuery, useQuery } from '@apollo/client';\n// import { GET_ALL_EMPLOYEES, GET_EMPLOYEES_BY_DEPARTMENT } from '@/graphql/queries';\n// import { useState, useEffect } from 'react';\n// import Link from 'next/link';\n// const EmployeeList = () => {\n//   const [selectedDepartment, setSelectedDepartment] = useState('All');\n//   // Get all employees initially (to build the department dropdown)\n//   const { data: allData, loading: loadingAll, error: errorAll } = useQuery(GET_ALL_EMPLOYEES);\n//   // Lazy query for department filtering\n//   const [fetchByDepartment, { data: filteredData, loading: loadingFiltered, error: errorFiltered }] =\n//     useLazyQuery(GET_EMPLOYEES_BY_DEPARTMENT);\n//   useEffect(() => {\n//     if (selectedDepartment !== 'All') {\n//       fetchByDepartment({ variables: { department: selectedDepartment } });\n//     }\n//   }, [selectedDepartment,fetchByDepartment]);\n//   const allEmployees = allData?.getAllEmployees || [];\n//   const filteredEmployees = filteredData?.getEmployeesByDepartment || [];\n//   const departments: string[] = Array.from(\n//     new Set(allEmployees.map((e:any) => e.department))\n//   );\n//   const employeesToShow = selectedDepartment === 'All' ? allEmployees : filteredEmployees;\n//   if (loadingAll || loadingFiltered) return <p>Loading...</p>;\n//   if (errorAll) return <p>Error loading employees: {errorAll.message}</p>;\n//   if (errorFiltered) return <p>Error filtering: {errorFiltered.message}</p>;\n//   return (\n//     <div className=\"mt-6\">\n//       <div className=\"mb-4\">\n//         <label className=\"text-sm font-medium\">\n//           Filter by Department:{' '}\n//           <select\n//             className=\"ml-2 border border-gray-300 p-1 rounded\"\n//             value={selectedDepartment}\n//             onChange={(e) => setSelectedDepartment(e.target.value)}\n//           >\n//             <option value=\"All\">All</option>\n//             {departments.map((dept) => (\n//               <option key={dept} value={dept}>\n//                 {dept}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//       </div>\n//       <table className=\"w-full border-collapse border border-gray-300\">\n//         <thead className=\"bg-gray-100\">\n//            <tr>\n//             <th className=\"p-2 border\">Name</th>\n//             <th className=\"p-2 border\">Position</th>\n//             <th className=\"p-2 border\">Department</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {employeesToShow.map((emp: any) => (\n//             <tr key={emp.id} className=\"text-center\">\n//               <Link href={`/employee/${emp.id}`}>{emp.name}</Link>\n//               <td className=\"p-2 border\">{emp.position}</td>\n//               <td className=\"p-2 border\">{emp.department}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n// export default EmployeeList;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0VtcGxveWVlTGlzdC50c3giLCJtYXBwaW5ncyI6IkFBQUEsMkRBQTJEO0FBQzNELHNGQUFzRjtBQUN0RiwrQ0FBK0M7QUFDL0MsZ0NBQWdDO0FBRWhDLCtCQUErQjtBQUMvQix5RUFBeUU7QUFFekUsc0VBQXNFO0FBQ3RFLGlHQUFpRztBQUVqRywyQ0FBMkM7QUFDM0Msd0dBQXdHO0FBQ3hHLGlEQUFpRDtBQUVqRCxzQkFBc0I7QUFDdEIsMENBQTBDO0FBQzFDLDhFQUE4RTtBQUM5RSxRQUFRO0FBQ1IsZ0RBQWdEO0FBRWhELHlEQUF5RDtBQUN6RCw0RUFBNEU7QUFFNUUsOENBQThDO0FBQzlDLHlEQUF5RDtBQUN6RCxPQUFPO0FBRVAsNkZBQTZGO0FBRTdGLGlFQUFpRTtBQUNqRSw2RUFBNkU7QUFDN0UsK0VBQStFO0FBRS9FLGFBQWE7QUFDYiw2QkFBNkI7QUFDN0IsK0JBQStCO0FBQy9CLGtEQUFrRDtBQUNsRCx1Q0FBdUM7QUFDdkMsb0JBQW9CO0FBQ3BCLGtFQUFrRTtBQUNsRSx5Q0FBeUM7QUFDekMsc0VBQXNFO0FBQ3RFLGNBQWM7QUFDZCwrQ0FBK0M7QUFDL0MsMkNBQTJDO0FBQzNDLGlEQUFpRDtBQUNqRCx5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLGtCQUFrQjtBQUNsQixzQkFBc0I7QUFDdEIsbUJBQW1CO0FBQ25CLGVBQWU7QUFFZiwwRUFBMEU7QUFDMUUsMENBQTBDO0FBQzFDLGtCQUFrQjtBQUNsQixtREFBbUQ7QUFDbkQsdURBQXVEO0FBQ3ZELHlEQUF5RDtBQUN6RCxrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQixpREFBaUQ7QUFDakQsd0RBQXdEO0FBQ3hELHFFQUFxRTtBQUNyRSwrREFBK0Q7QUFDL0QsaUVBQWlFO0FBQ2pFLG9CQUFvQjtBQUNwQixnQkFBZ0I7QUFDaEIsbUJBQW1CO0FBQ25CLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsT0FBTztBQUNQLEtBQUs7QUFFTCwrQkFBK0IiLCJzb3VyY2VzIjpbIkQ6XFxFbXBsb3llZURpcmVjdG9yeUFwcFxcZnJvbnRlbmRcXHNyY1xcY29tcG9uZW50c1xcRW1wbG95ZWVMaXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgeyB1c2VMYXp5UXVlcnksIHVzZVF1ZXJ5IH0gZnJvbSAnQGFwb2xsby9jbGllbnQnO1xyXG4vLyBpbXBvcnQgeyBHRVRfQUxMX0VNUExPWUVFUywgR0VUX0VNUExPWUVFU19CWV9ERVBBUlRNRU5UIH0gZnJvbSAnQC9ncmFwaHFsL3F1ZXJpZXMnO1xyXG4vLyBpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xyXG4vLyBpbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xyXG5cclxuLy8gY29uc3QgRW1wbG95ZWVMaXN0ID0gKCkgPT4ge1xyXG4vLyAgIGNvbnN0IFtzZWxlY3RlZERlcGFydG1lbnQsIHNldFNlbGVjdGVkRGVwYXJ0bWVudF0gPSB1c2VTdGF0ZSgnQWxsJyk7XHJcblxyXG4vLyAgIC8vIEdldCBhbGwgZW1wbG95ZWVzIGluaXRpYWxseSAodG8gYnVpbGQgdGhlIGRlcGFydG1lbnQgZHJvcGRvd24pXHJcbi8vICAgY29uc3QgeyBkYXRhOiBhbGxEYXRhLCBsb2FkaW5nOiBsb2FkaW5nQWxsLCBlcnJvcjogZXJyb3JBbGwgfSA9IHVzZVF1ZXJ5KEdFVF9BTExfRU1QTE9ZRUVTKTtcclxuXHJcbi8vICAgLy8gTGF6eSBxdWVyeSBmb3IgZGVwYXJ0bWVudCBmaWx0ZXJpbmdcclxuLy8gICBjb25zdCBbZmV0Y2hCeURlcGFydG1lbnQsIHsgZGF0YTogZmlsdGVyZWREYXRhLCBsb2FkaW5nOiBsb2FkaW5nRmlsdGVyZWQsIGVycm9yOiBlcnJvckZpbHRlcmVkIH1dID1cclxuLy8gICAgIHVzZUxhenlRdWVyeShHRVRfRU1QTE9ZRUVTX0JZX0RFUEFSVE1FTlQpO1xyXG5cclxuLy8gICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4vLyAgICAgaWYgKHNlbGVjdGVkRGVwYXJ0bWVudCAhPT0gJ0FsbCcpIHtcclxuLy8gICAgICAgZmV0Y2hCeURlcGFydG1lbnQoeyB2YXJpYWJsZXM6IHsgZGVwYXJ0bWVudDogc2VsZWN0ZWREZXBhcnRtZW50IH0gfSk7XHJcbi8vICAgICB9XHJcbi8vICAgfSwgW3NlbGVjdGVkRGVwYXJ0bWVudCxmZXRjaEJ5RGVwYXJ0bWVudF0pO1xyXG5cclxuLy8gICBjb25zdCBhbGxFbXBsb3llZXMgPSBhbGxEYXRhPy5nZXRBbGxFbXBsb3llZXMgfHwgW107XHJcbi8vICAgY29uc3QgZmlsdGVyZWRFbXBsb3llZXMgPSBmaWx0ZXJlZERhdGE/LmdldEVtcGxveWVlc0J5RGVwYXJ0bWVudCB8fCBbXTtcclxuXHJcbi8vICAgY29uc3QgZGVwYXJ0bWVudHM6IHN0cmluZ1tdID0gQXJyYXkuZnJvbShcclxuLy8gICAgIG5ldyBTZXQoYWxsRW1wbG95ZWVzLm1hcCgoZTphbnkpID0+IGUuZGVwYXJ0bWVudCkpXHJcbi8vICAgKTtcclxuXHJcbi8vICAgY29uc3QgZW1wbG95ZWVzVG9TaG93ID0gc2VsZWN0ZWREZXBhcnRtZW50ID09PSAnQWxsJyA/IGFsbEVtcGxveWVlcyA6IGZpbHRlcmVkRW1wbG95ZWVzO1xyXG5cclxuLy8gICBpZiAobG9hZGluZ0FsbCB8fCBsb2FkaW5nRmlsdGVyZWQpIHJldHVybiA8cD5Mb2FkaW5nLi4uPC9wPjtcclxuLy8gICBpZiAoZXJyb3JBbGwpIHJldHVybiA8cD5FcnJvciBsb2FkaW5nIGVtcGxveWVlczoge2Vycm9yQWxsLm1lc3NhZ2V9PC9wPjtcclxuLy8gICBpZiAoZXJyb3JGaWx0ZXJlZCkgcmV0dXJuIDxwPkVycm9yIGZpbHRlcmluZzoge2Vycm9yRmlsdGVyZWQubWVzc2FnZX08L3A+O1xyXG5cclxuLy8gICByZXR1cm4gKFxyXG4vLyAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC02XCI+XHJcbi8vICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWItNFwiPlxyXG4vLyAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtXCI+XHJcbi8vICAgICAgICAgICBGaWx0ZXIgYnkgRGVwYXJ0bWVudDp7JyAnfVxyXG4vLyAgICAgICAgICAgPHNlbGVjdFxyXG4vLyAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC0yIGJvcmRlciBib3JkZXItZ3JheS0zMDAgcC0xIHJvdW5kZWRcIlxyXG4vLyAgICAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWREZXBhcnRtZW50fVxyXG4vLyAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFNlbGVjdGVkRGVwYXJ0bWVudChlLnRhcmdldC52YWx1ZSl9XHJcbi8vICAgICAgICAgICA+XHJcbi8vICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJBbGxcIj5BbGw8L29wdGlvbj5cclxuLy8gICAgICAgICAgICAge2RlcGFydG1lbnRzLm1hcCgoZGVwdCkgPT4gKFxyXG4vLyAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtkZXB0fSB2YWx1ZT17ZGVwdH0+XHJcbi8vICAgICAgICAgICAgICAgICB7ZGVwdH1cclxuLy8gICAgICAgICAgICAgICA8L29wdGlvbj5cclxuLy8gICAgICAgICAgICAgKSl9XHJcbi8vICAgICAgICAgICA8L3NlbGVjdD5cclxuLy8gICAgICAgICA8L2xhYmVsPlxyXG4vLyAgICAgICA8L2Rpdj5cclxuXHJcbi8vICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ3LWZ1bGwgYm9yZGVyLWNvbGxhcHNlIGJvcmRlciBib3JkZXItZ3JheS0zMDBcIj5cclxuLy8gICAgICAgICA8dGhlYWQgY2xhc3NOYW1lPVwiYmctZ3JheS0xMDBcIj5cclxuLy8gICAgICAgICAgICA8dHI+XHJcbi8vICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJwLTIgYm9yZGVyXCI+TmFtZTwvdGg+XHJcbi8vICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJwLTIgYm9yZGVyXCI+UG9zaXRpb248L3RoPlxyXG4vLyAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwicC0yIGJvcmRlclwiPkRlcGFydG1lbnQ8L3RoPlxyXG4vLyAgICAgICAgICAgPC90cj5cclxuLy8gICAgICAgICA8L3RoZWFkPlxyXG4vLyAgICAgICAgIDx0Ym9keT5cclxuLy8gICAgICAgICAgIHtlbXBsb3llZXNUb1Nob3cubWFwKChlbXA6IGFueSkgPT4gKFxyXG4vLyAgICAgICAgICAgICA8dHIga2V5PXtlbXAuaWR9IGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XHJcbi8vICAgICAgICAgICAgICAgPExpbmsgaHJlZj17YC9lbXBsb3llZS8ke2VtcC5pZH1gfT57ZW1wLm5hbWV9PC9MaW5rPlxyXG4vLyAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwLTIgYm9yZGVyXCI+e2VtcC5wb3NpdGlvbn08L3RkPlxyXG4vLyAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJwLTIgYm9yZGVyXCI+e2VtcC5kZXBhcnRtZW50fTwvdGQ+XHJcbi8vICAgICAgICAgICAgIDwvdHI+XHJcbi8vICAgICAgICAgICApKX1cclxuLy8gICAgICAgICA8L3Rib2R5PlxyXG4vLyAgICAgICA8L3RhYmxlPlxyXG4vLyAgICAgPC9kaXY+XHJcbi8vICAgKTtcclxuLy8gfTtcclxuXHJcbi8vIGV4cG9ydCBkZWZhdWx0IEVtcGxveWVlTGlzdDtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/EmployeeList.tsx\n"));

/***/ })

});